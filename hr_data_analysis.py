# -*- coding: utf-8 -*-
"""HR Data Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nkRSaMoTKR_Lu7kw6nUpivzGbHBocP1d
"""

import pandas as pd

# Step 1: Load the dataset
df = pd.read_csv('hr_data.csv')

# Step 2: Remove unnecessary columns
# Let's assume columns 'Column1' and 'Column2' are unnecessary
columns_to_remove = ['Column1', 'Column2']
df = df.drop(columns=columns_to_remove)

# Step 3: Rename columns
# Let's assume we want to rename 'old_name1' to 'new_name1' and 'old_name2' to 'new_name2'
column_renames = {
    'old_name1': 'new_name1',
    'old_name2': 'new_name2'
}
df = df.rename(columns=column_renames)

# Step 4: Eliminate redundant entries
df = df.drop_duplicates()

# Step 5: Sanitize specific columns
# Example: Remove special characters from 'name' column and standardize to lowercase
df['name'] = df['name'].str.replace('[^a-zA-Z ]', '').str.lower()

# Step 6: Eliminate NaN values
# Option 1: Remove rows with any NaN values
df = df.dropna()

# Option 2: Fill NaN values with a specific value (e.g., 0 or 'Unknown')
# df = df.fillna(0)
# df['some_column'] = df['some_column'].fillna('Unknown')

# Step 7: Additional changes (if necessary)
# Example: Convert a date column from string to datetime
df['hire_date'] = pd.to_datetime(df['hire_date'])

# Example: Create a new column based on existing columns
df['full_name'] = df['first_name'] + ' ' + df['last_name']

# Save the cleaned dataset to a new CSV file
df.to_csv('cleaned_hr_data.csv', index=False)

print("Data cleansing complete. Cleaned data saved to 'cleaned_hr_data.csv'.")

import pandas as pd

#Load the dataset
df = pd.read_csv('/content/HR Data.csv')

# Remove unnecessary columns

columns_to_remove = ['EmployeeCount', 'EmployeeNumber', 'Over18', 'StandardHours']
df = df.drop(columns=columns_to_remove)

df

import matplotlib.pyplot as plt
import seaborn as sns

# Plotting each attribute
for column in df.columns:
    plt.figure(figsize=(10, 6))
    if df[column].dtype == 'object' or len(df[column].unique()) < 20:
        # Categorical data
        sns.countplot(y=column, data=df, palette="viridis")
        plt.title(f'Count of {column}')
        plt.xlabel('Count')
        plt.ylabel(column)
    else:
        # Numerical data
        sns.histplot(df[column], kde=True, color='blue', bins=30)
        plt.title(f'Distribution of {column}')
        plt.xlabel(column)
        plt.ylabel('Frequency')
    plt.show()

print("Plots generated for each attribute.")

# Giving new names to the remaining columns
new_column_names = {old_name: f'col_{i+1}' for i, old_name in enumerate(df.columns)}

# Rename columns
df = df.rename(columns=new_column_names)

# Print the new column names to verify
print("New column names:")
print(df.columns)

# Save the cleaned and renamed dataset to a new CSV file
df.to_csv('renamed_hr_data.csv', index=False)

print("Data cleaning and renaming complete. Cleaned data saved to 'renamed_hr_data.csv'.")

# Eliminate redundant entries
df = df.drop_duplicates()

# Sanitize specific columns
df['col_10'] = df['col_10'].str.lower()

# Eliminate NaN values
df = df.dropna()

df

# Look for a few more changes if necessary
# Example: Convert 'col_25' (formerly 'TotalWorkingYears') to numeric if it's not
df['col_25'] = pd.to_numeric(df['col_25'], errors='coerce')

# Save the further cleaned dataset to a new CSV file in the current directory
df.to_csv('final_cleaned_hr_data.csv', index=False)

print("Further data cleaning complete. Cleaned data saved to 'final_cleaned_hr_data.csv'.")